importcv2
importos
fromflaskimportFlask,request,render_template
fromdatetimeimportdate
fromdatetimeimportdatetime
importnumpyasnp
fromsklearn.neighborsimportKNeighborsClassifier
importpandasaspd
importjoblib


#### Defining Flask App
app = Flask(__name__)


#### Saving Date today in 2 different formats
datetoday = date.today().strftime("%m_%d_%y")
datetoday2 = date.today().strftime("%d-%B-%Y")


#### Initializing VideoCapture object to access WebCam
face_detector = cv2.CascadeClassifier('static/haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)


#### If these directories don't exist, create them
ifnotos.path.isdir('Attendance'):
    os.makedirs('Attendance')
ifnotos.path.isdir('static/faces'):
    os.makedirs('static/faces')
iff'Attendance-{datetoday}.csv'notinos.listdir('Attendance'):
    withopen(f'Attendance/Attendance-{datetoday}.csv','w') asf:
        f.write('Name,Roll,Time')


#### get a number of total registered users
deftotalreg():
    returnlen(os.listdir('static/faces'))


#### extract the face from an image
defextract_faces(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    face_points = face_detector.detectMultiScale(gray, 1.3, 5)
    returnface_points


#### Identify face using ML model
defidentify_face(facearray):
    model = joblib.load('static/face_recognition_model.pkl')
    returnmodel.predict(facearray)


#### A function which trains the model on all the faces available in faces folder
deftrain_model():
    faces = []
    labels = []
    userlist = os.listdir('static/faces')
    foruserinuserlist:
        forimgnameinos.listdir(f'static/faces/{user}'):
            img = cv2.imread(f'static/faces/{user}/{imgname}')
            resized_face = cv2.resize(img, (50, 50))
            faces.append(resized_face.ravel())
            labels.append(user)
    faces = np.array(faces)
    knn = KNeighborsClassifier(n_neighbors=5)
    knn.fit(faces,labels)
    joblib.dump(knn,'static/face_recognition_model.pkl')


#### Extract info from today's attendance file in attendance folder
defextract_attendance():
    df = pd.read_csv(f'Attendance/Attendance-{datetoday}.csv')
    names = df['Name']
    rolls = df['Roll']
    times = df['Time']
    l = len(df)
    returnnames,rolls,times,l


#### Add Attendance of a specific user
defadd_attendance(name):
    username = name.split('_')[0]
    userid = name.split('_')[1]
    current_time = datetime.now().strftime("%H:%M:%S")
    
    df = pd.read_csv(f'Attendance/Attendance-{datetoday}.csv')
    ifint(userid) notinlist(df['Roll']):
        withopen(f'Attendance/Attendance-{datetoday}.csv','a') asf:
            f.write(f'\n{username},{userid},{current_time}')


################## ROUTING FUNCTIONS #########################


#### Our main page
@app.route('/')
defhome():
    names,rolls,times,l = extract_attendance()    
    returnrender_template('home.html',names=names,rolls=rolls,times=times,l=l,totalreg=totalreg(),datetoday2=datetoday2) 


#### This function will run when we click on Take Attendance Button
@app.route('/start',methods=['GET'])
defstart():
    if'face_recognition_model.pkl'notinos.listdir('static'):
        returnrender_template('home.html',totalreg=totalreg(),datetoday2=datetoday2,mess='There is no trained model in the static folder. Please add a new face to continue.') 


    cap = cv2.VideoCapture(0)
    ret = True
    whileret:
        ret,frame = cap.read()
        ifextract_faces(frame)!=():
            (x,y,w,h) = extract_faces(frame)[0]
            cv2.rectangle(frame,(x, y), (x+w, y+h), (255, 0, 20), 2)
            face = cv2.resize(frame[y:y+h,x:x+w], (50, 50))
            identified_person = identify_face(face.reshape(1,-1))[0]
            add_attendance(identified_person)
            cv2.putText(frame,f'{identified_person}',(30,30),cv2.FONT_HERSHEY_SIMPLEX,1,(255, 0, 20),2,cv2.LINE_AA)
        cv2.imshow('Attendance',frame)
        ifcv2.waitKey(1)==27:
            break
    cap.release()
    cv2.destroyAllWindows()
    names,rolls,times,l = extract_attendance()    
    returnrender_template('home.html',names=names,rolls=rolls,times=times,l=l,totalreg=totalreg(),datetoday2=datetoday2) 


#### This function will run when we add a new user
@app.route('/add',methods=['GET','POST'])
defadd():
    newusername = request.form['newusername']
    newuserid = request.form['newuserid']
    userimagefolder = 'static/faces/'+newusername+'_'+str(newuserid)
    ifnotos.path.isdir(userimagefolder):
        os.makedirs(userimagefolder)
    cap = cv2.VideoCapture(0)
    i,j = 0,0
    while1:
        _,frame = cap.read()
        faces = extract_faces(frame)
        for (x,y,w,h) infaces:
            cv2.rectangle(frame,(x, y), (x+w, y+h), (255, 0, 20), 2)
            cv2.putText(frame,f'Images Captured: {i}/50',(30,30),cv2.FONT_HERSHEY_SIMPLEX,1,(255, 0, 20),2,cv2.LINE_AA)
            ifj%10==0:
                name = newusername+'_'+str(i)+'.jpg'
                cv2.imwrite(userimagefolder+'/'+name,frame[y:y+h,x:x+w])
                i+=1
            j+=1
        ifj==500:
            break
        cv2.imshow('Adding new User',frame)
        ifcv2.waitKey(1)==27:
            break
    cap.release()
    cv2.destroyAllWindows()
    print('Training Model')
    train_model()
    names,rolls,times,l = extract_attendance()    
    returnrender_template('home.html',names=names,rolls=rolls,times=times,l=l,totalreg=totalreg(),datetoday2=datetoday2) 


#### Our main function which runs the Flask App
if__name__ == '__main__':
    app.run(debug=True)
